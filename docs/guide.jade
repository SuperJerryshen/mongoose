extends layout

block content
  h2 模式（Schemas）
  .important
    :markdown
      如果你还接触过Mongoose，请务必花几分钟阅读一下[快速开始](./index.html)，可以让你对Mongoose如何工作有一个初步的概念。
      如果你正在从`4.x`升级到`5.x`，请您花几分钟阅读一下[迁移指南](https://github.com/Automattic/mongoose/blob/master/migrating_to_5.md).
  :markdown
    <h3 id="definition"><a href="#definition">定义你的schema</a></h3>

    在Mongoose中的所有东西都是开始于Schema的。每一个Schema对应于一个MongoDB的集合，
    并且基于那个集合，定义了文档的格式。

    ```javascript
      var mongoose = require('mongoose');
      var Schema = mongoose.Schema;

      var blogSchema = new Schema({
        title:  String,
        author: String,
        body:   String,
        comments: [{ body: String, date: Date }],
        date: { type: Date, default: Date.now },
        hidden: Boolean,
        meta: {
          votes: Number,
          favs:  Number
        }
      });
    ```

    如果你想在后面添加额外的键值，请使用
    [Schema#add](./api.html#schema_Schema-add)方法。

    代码中，`blogSchema`每一个`key`定义的文档属性，
    会被映射成它相应的[SchemaType](./api.html#schematype_SchemaType)。
    例如，我们已经定义了一个`title`属性，它的SchemaType将会被映射为
    [String](./api.html#schema-string-js)，而对于`date`属性，
    其SchemaType将会被映射为`Date`。键值也可以是嵌套对象，
    包含更深一层的`key/type`对，就像上例中的`meta`属性。

    允许的SchemaTypes有:

    * String
    * Number
    * Date
    * Buffer
    * Boolean
    * Mixed
    * ObjectId
    * Array

    了解更多，关于[SchemaTypes](./schematypes.html)。

    Schemas不仅定义了文档的结构和类型的映射，
    还定义了文档的[实例方法](#methods)，
    [静态Model方法](#statics), [复合索引](#indexes),
    以及叫做[中间件](./middleware.html)的文档生命周期钩子。

    <h3 id="models"><a href="#models">创建一个model</a></h3>

    为了使用我们定义的Schema，我们需要将`blogSchema`转换为
    我们可以使用的[Model](./models.html)。
    为了这么做，我们需要将它传递到`mongoose.model(modelName, schema)`中:

    ```javascript
      var Blog = mongoose.model('Blog', blogSchema);
      // 准备开始！
    ```

    <h3 id="methods"><a href="#methods">实例方法</a></h3>

    `Models`的实例就是[documents](./documents.html)。
    Documents拥有许多它们自己的[内建实例方法](./api.html#document-js)。
    我们也可以定义自己的文档实例方法。

    ```javascript
      // 定义一个schema
      var animalSchema = new Schema({ name: String, type: String });

      // 给animalSchema的"methods"对象分配一个函数
      animalSchema.methods.findSimilarTypes = function(cb) {
        return this.model('Animal').find({ type: this.type }, cb);
      };
    ```

    现在我们所有的`animal`实例，都拥有一个`findSimilarTypes`方法。

    ```javascript
      var Animal = mongoose.model('Animal', animalSchema);
      var dog = new Animal({ type: 'dog' });

      dog.findSimilarTypes(function(err, dogs) {
        console.log(dogs); // woof
      });
    ```

    * 覆盖默认的mongoose文档方法，可能会导致不可预料的后果。了解更多保留字，详见[Schema.reserved](./api.html#schema_Schema.reserved)。
    * **不要**使用箭头函数(`=>`)，来定义方法。因为箭头函数[未绑定`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_binding_of_this)，所以你的方法**没有**途径获取文档，因此上例中的代码就不能正常工作。

    <h3 id="statics"><a href="#statics">静态方法</a></h3>

    给`Model`添加一个静态方法也非常简单。
    继续我们的`animalSchema`:

    ```javascript
      // 给animalSchema的"statics"，分配一个函数属性
      animalSchema.statics.findByName = function(name, cb) {
        return this.find({ name: new RegExp(name, 'i') }, cb);
      };

      var Animal = mongoose.model('Animal', animalSchema);
      Animal.findByName('fido', function(err, animals) {
        console.log(animals);
      });
    ```

    _ **不要**使用箭头函数(`=>`)，来定义方法。因为箭头函数[未绑定`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_binding_of_this)，所以你的方法**没有**途径获取文档，因此上例中的代码就不能正常工作。_    

    <h3 id="query-helpers"><a href="#query-helpers">辅助查询函数</a></h3>

    你也可以添加辅助查询的函数，它就像实例方法一样，
    但是只是用于mongoose的查询。辅助查询函数让你可以扩展mongoose的
    [链式查询生成器API](./queries.html)。

    ```javascript
      animalSchema.query.byName = function(name) {
        return this.find({ name: new RegExp(name, 'i') });
      };

      var Animal = mongoose.model('Animal', animalSchema);
      Animal.find().byName('fido').exec(function(err, animals) {
        console.log(animals);
      });
    ```

    <h3 id="indexes"><a href="#indexes">索引</a></h3>

    MongoDB支持[二级索引](http://docs.mongodb.org/manual/indexes/)。
    通过mongoose，我们[在](./api.html#schematype_SchemaType-index) [这个](./api.html#schematype_SchemaType-unique) [路径](./api.html#schematype_SchemaType-sparse) [层](./api.html#schema_date_SchemaDate-expires)或`schema`层，通过`Schema`定义这些索引。
    当生成[混合索引](https://docs.mongodb.com/manual/core/index-compound/)时，
    在schema层定义索引是非常必要的。

    ```javascript
      var animalSchema = new Schema({
        name: String,
        type: String,
        tags: { type: [String], index: true } // field level
      });

      animalSchema.index({ name: 1, type: -1 }); // schema level
    ```

    当你的应用启动时，`Mongoose`为了在`Schema`中定义索引，将自动调用[`createIndex`](https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/#db.collection.createIndex)。
    `Mongoose`将会对每个索引，按照顺序调用`createIndex`，并且会在所有的`createIndex`调用成功或发生错误时，在`model`上触发`index`事件。
    在开发中这样非常好，但是生成索引会导致[显著的性能影响](http://docs.mongodb.org/manual/core/indexes/#index-creation-operations)，所以我们推荐在正式环境中关闭此功能。
    通过在`Schema`中设置`autoIndex`为`false`来关闭自动生成索引，
    或者在`connection`全局设置`autoIndex`为`false`。

    ```javascript
      mongoose.connect('mongodb://user:pass@localhost:port/database', { autoIndex: false });
      // or
      mongoose.createConnection('mongodb://user:pass@localhost:port/database', { autoIndex: false });
      // or
      animalSchema.set('autoIndex', false);
      // or
      new Schema({..}, { autoIndex: false });
    ```

    Mongoose将会在索引生成完毕或发生错误时，触发`index`事件。

    ```javascript
      // Will cause an error because mongodb has an _id index by default that
      // is not sparse
      animalSchema.index({ _id: 1 }, { sparse: true });
      var Animal = mongoose.model('Animal', animalSchema);

      Animal.on('index', function(error) {
        // "_id index cannot be sparse"
        console.log(error.message);
      });
    ```

    您也可以查看[Model#ensureIndexes](./api.html#model_Model.ensureIndexes)方法。

    <h3 id="virtuals"><a href="#virtuals">虚拟类型(Virtuals)</a></h3>

    [虚拟类型（Virtuals）](./api.html#schema_Schema-virtual) 
    是你可以获取和设置的文档，但是却不会向MongoDB存储。
    `getters` 对于格式化和组合字段非常有用，
    `setters` 对于分解一个值为多个值并存储时，很有用。

    ```javascript
      // define a schema
      var personSchema = new Schema({
        name: {
          first: String,
          last: String
        }
      });

      // compile our model
      var Person = mongoose.model('Person', personSchema);

      // create a document
      var axl = new Person({
        name: { first: 'Axl', last: 'Rose' }
      });
    ```

    如果你想要打印`person`的全名，你也可以自己拼接：

    ```javascript
    console.log(axl.name.first + ' ' + axl.name.last); // Axl Rose
    ```

    但是每次使用时如果都要拼接字段，会非常不灵活。
    而且如果你想在名字上做一些额外的处理，
    比如[移除 diacritics](https://www.npmjs.com/package/diacritics)时，将会如何？
    [虚拟属性 getter](./api.html#virtualtype_VirtualType-get)让你可以
    定义一个 `fullName` 属性，而不会存在于MongoDB中。

    ```javascript
    personSchema.virtual('fullName').get(function () {
      return this.name.first + ' ' + this.name.last;
    });
    ```

    当你每次获取 `fullName`属性时，mongoose 将会调用你定义的 `getter` 函数：

    ```javascript
    console.log(axl.fullName); // Axl Rose
    ```

    如果你使用 `toJSON()` 或 `toObject()` （或者在mongoose文档上使用 `JSON.stringify()`），
    mongoose 默认*不会*包含虚拟属性。
    如果想获取虚拟属性，需要向
    [toObject()](./api.html#document_Document-toObject) 或 `toJSON()`中，
    传入 `{ virtuals: true }` 的配置。

    你也可以向虚拟属性中，添加自定义的 `setter`。
    通过虚拟属性 `fullName`，你可以同时设置 `first name` 和 `last name` 的值。

    ```javascript
    personSchema.virtual('fullName').
      get(function() { return this.name.first + ' ' + this.name.last; }).
      set(function(v) {
        this.name.first = v.substr(0, v.indexOf(' '));
        this.name.last = v.substr(v.indexOf(' ') + 1);
      });

    axl.fullName = 'William Rose'; // 此时， `axl.name.first` 的值为 "William"
    ```

    在其他验证之前，虚拟属性的setter非常实用。
    所以尽管上例中 `first` 和 `last` 字段都是必须的，但仍然可以运行。

    虚拟属性不能做为queries和字段选择使用。
    因为虚拟属性没有存在于MongoDB种，你不能用他们来进行查询。

    <h5 id="aliases"><a href="#aliases">别名（Aliases）</a></h5>

    别名是一个很特别的虚拟属性类型，
    它的setter和getter将无缝地获取其他属性的get和set。
    这样对于节省带宽是非常方便的，所以为了提高代码可读性，
    你可以将数据库中的属性转换为一个简短的属性名。

    ```javascript
    var personSchema = new Schema({
      n: {
        type: String,
        // 访问`name`将返回`n`的值, 
        // 设置 `n` 值同样也会设置 `name` 的值
        alias: 'name'
      }
    });

    // 设置 `name` 的值将会广播给 `n`
    var person = new Person({ name: 'Val' });
    console.log(person); // { n: 'Val' }
    console.log(person.toObject({ virtuals: true })); // { n: 'Val', name: 'Val' }
    console.log(person.name); // "Val"

    person.name = 'Not Val';
    console.log(person); // { n: 'Not Val' }
    ```

    <h3 id="options"><a href="#options">配置（Options）</a></h3>

    `Schemas` 有少量可配置的属性，
    可以通过传递给构造函数，或者直接 `set` 来进行配置：

    ```javascript
    new Schema({..}, options);

    // or

    var schema = new Schema({..});
    schema.set(option, value);
    ```

    有效的配置选项:

    - [autoIndex](#autoIndex)
    - [bufferCommands](#bufferCommands)
    - [capped](#capped)
    - [collection](#collection)
    - [id](#id)
    - [_id](#_id)
    - [minimize](#minimize)
    - [read](#read)
    - [shardKey](#shardKey)
    - [strict](#strict)
    - [strictQuery](#strictQuery)
    - [toJSON](#toJSON)
    - [toObject](#toObject)
    - [typeKey](#typeKey)
    - [validateBeforeSave](#validateBeforeSave)
    - [versionKey](#versionKey)
    - [collation](#collation)
    - [skipVersioning](#skipVersioning)
    - [timestamps](#timestamps)

    <h3 id="autoIndex"><a href="#autoIndex">选项: autoIndex</a></h3>

    在应用开始运行时，Mongoose会向你的`Schmea`中的每一个索引发送一个[`createIndex` 命令](https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/#db.collection.createIndex)
    从Mongoose v3开始，索引是默认自动生成的。
    如果你想禁用自动生成索引的功能，需要在索引生成的时候手动操作，
    也就是把你的 `Schema` 的 `autoIndex` 选项设置为 `false`，
    并在你的model上使用[ensureIndexes](./api.html#model_Model.ensureIndexes)方法。

    ```javascript
    var schema = new Schema({..}, { autoIndex: false });
    var Clock = mongoose.model('Clock', schema);
    Clock.ensureIndexes(callback);
    ```

    <h3 id="bufferCommands"><a href="#bufferCommands">选项: bufferCommands</a></h3>

    默认情况下，从连接中断开始，直到重新连接，mongoose会缓存指令。
    设置`bufferCommands` 为 `false` 可以禁用缓存。

    ```javascript
    var schema = new Schema({..}, { bufferCommands: false });
    ```

    The schema `bufferCommands` option overrides the global `bufferCommands` option.

    ```javascript
    mongoose.set('bufferCommands', true);
    // 如果schema的选项是通过set设置的，下面的选项将会覆盖上面的
    var schema = new Schema({..}, { bufferCommands: false });
    ```

    <h3 id="capped"><a href="#capped">选项: capped</a></h3>

    Mongoose支持MongoDB的[固定(capped)](http://www.mongodb.org/display/DOCS/Capped+Collections)集合。
    确认设置基础的MongoDB集合为 `capped`，
    `capped` 选项可以在[bytes](http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-size.)上
    限制集合的最大占用空间。

    ```javascript
    new Schema({..}, { capped: 1024 });
    ```

    如果你想传入一些类似于
    [max](http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-max)
    或 [autoIndexId](http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-autoIndexId)
    这样的选项时，`capped` 也可以设置为一个对象。
    这种情况下，`size` 选项是必填项。

    ```javascript
    new Schema({..}, { capped: { size: 1024, max: 1000, autoIndexId: true } });
    ```

    <h3 id="collection"><a href="#collection">选项: collection</a></h3>

    默认情况下，Mongoose可以通过[utils.toCollectionName](./api.html#utils_exports.toCollectionName)方法，
    传入model的名字，来获取一个集合的名字。
    这个方法会把名字变为复数。
    对于你的集合，如果你想要一个不同的名字，可以设置此选项。
    ```javascript
    var dataSchema = new Schema({..}, { collection: 'data' });
    ```

    <h3 id="id"><a href="#id">选项: id</a></h3>

    Mongoose默认会给你的每一个schema分配一个 `id` 虚拟属性，
    其值为转化为string后的文档 `_id` 字段，也就是ObjectsId的十六进制字符串。
    如果你不想在schema中添加 `id` 的getter，
    你可以通过在schema构建的时候，传入参数禁用。

    ```javascript
    // 默认行为
    var schema = new Schema({ name: String });
    var Page = mongoose.model('Page', schema);
    var p = new Page({ name: 'mongodb.org' });
    console.log(p.id); // '50341373e894ad16347efe01'

    // 禁用 id
    var schema = new Schema({ name: String }, { id: false });
    var Page = mongoose.model('Page', schema);
    var p = new Page({ name: 'mongodb.org' });
    console.log(p.id); // undefined
    ```

    <h3 id="_id"><a href="#_id">选项: _id</a></h3>

    如果one没有传入[Schema](/docs/api.html#schema-js)构造函数，
    Mongoose默认会给你的每一个schema分配一个 `_id` 字段。
    为了和MongoDB的默认行为保持一致，
    _id的类型会指定为[ObjectId](/docs/api.html#schema_Schema.Types)。

    你**只能**在子文档中使用这些选项。
    Mongoose不能在没有id时，保存一个文档，
    所以当你没有_id时保存文档，将会触发错误事件。

    ```javascript
    // 默认行为
    var schema = new Schema({ name: String });
    var Page = mongoose.model('Page', schema);
    var p = new Page({ name: 'mongodb.org' });
    console.log(p); // { _id: '50341373e894ad16347efe01', name: 'mongodb.org' }

    // 禁用 _id
    var childSchema = new Schema({ name: String }, { _id: false });
    var parentSchema = new Schema({ children: [childSchema] });

    var Model = mongoose.model('Model', parentSchema);

    Model.create({ children: [{ name: 'Luke' }] }, function(error, doc) {
      // doc.children[0]._id 的值将为 undefined
    });
    ```

    <h3 id="minimize"><a href="#minimize">选项: minimize</a></h3>

    默认情况下，Mongoose将会通过删除空对象来 “最小化” schemas。

    ```javascript
    var schema = new Schema({ name: String, inventory: {} });
    var Character = mongoose.model('Character', schema);

    // `inventory`如果不是空对象，将进行存储
    var frodo = new Character({ name: 'Frodo', inventory: { ringOfPower: 1 }});
    Character.findOne({ name: 'Frodo' }, function(err, character) {
      console.log(character); // { name: 'Frodo', inventory: { ringOfPower: 1 }}
    });

    // `inventory`为空对象，将不会存储
    var sam = new Character({ name: 'Sam', inventory: {}});
    Character.findOne({ name: 'Sam' }, function(err, character) {
      console.log(character); // { name: 'Sam' }
    });
    ```

    这个行为可以通过设置 `minimize` 为 `false` 来覆盖。
    设置后，将会保存空对象。

    ```javascript
    var schema = new Schema({ name: String, inventory: {} }, { minimize: false });
    var Character = mongoose.model('Character', schema);

    // `inventory`为空时也会保存
    var sam = new Character({ name: 'Sam', inventory: {}});
    Character.findOne({ name: 'Sam' }, function(err, character) {
      console.log(character); // { name: 'Sam', inventory: {}}
    });
    ```

    <h3 id="read"><a href="#read">选项: read</a></h3>

    允许在schema级设置[query#read](/docs/api.html#query_Query-read)的值，
    对所有从model衍生来的query提供了一种应用默认
    [ReadPreferences](http://docs.mongodb.org/manual/applications/replication/#replica-set-read-preference)的方式。

    ```javascript
    var schema = new Schema({..}, { read: 'primary' });            // 别名 'p'
    var schema = new Schema({..}, { read: 'primaryPreferred' });   // 别名 'pp'
    var schema = new Schema({..}, { read: 'secondary' });          // 别名 's'
    var schema = new Schema({..}, { read: 'secondaryPreferred' }); // 别名 'sp'
    var schema = new Schema({..}, { read: 'nearest' });            // 别名 'n'
    ```

    每一个由单词首字母组成的别名是可以使用的，从而避免拼错单词。

    `read` 选项允许我们指定 _tag sets_。这样可以告诉
    [驱动（driver）](https://github.com/mongodb/node-mongodb-native/)
    从副本集的哪一个成员读取。
    在[这里](http://docs.mongodb.org/manual/applications/replication/#tag-sets)
    和[这里](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences)
    可以阅读更多关于标签集合（tag sets）的内容。

    _注意：在连接的时候，你也可以指定驱动优先读取
    [strategy](http://mongodb.github.com/node-mongodb-native/api-generated/replset.html?highlight=strategy)选项：_

    ```javascript
    // 周期性地ping副本集，来测量网络延时
    var options = { replset: { strategy: 'ping' }};
    mongoose.connect(uri, options);

    var schema = new Schema({..}, { read: ['nearest', { disk: 'ssd' }] });
    mongoose.model('JellyBean', schema);
    ```

    <h3 id="shardKey"><a href="#shardKey">选项: shardKey</a></h3>

    `sharded`选项用于当我们有一个[碎片化的 MongoDB 结构](http://www.mongodb.org/display/DOCS/Sharding+Introduction)时。
    在所有的插入/更新操作时，每一个碎片化的集合会给出一个 `shard key`。
    我们只需要把schema的shard设置为同一值既可。

    ```javascript
    new Schema({ .. }, { shardKey: { tag: 1, name: 1 }})
    ```

    _注意 Mongoose 不会发送 `shardcollection` 指令给你。
    你必须自己配置你的shard。_

    <h3 id="strict">选项: strict</h3>

    `strict`选项（默认打开）确保传入我们model构造函数中，
    但没在schema中定义的值，不会保存到数据库中。

    ```javascript
    var thingSchema = new Schema({..})
    var Thing = mongoose.model('Thing', thingSchema);
    var thing = new Thing({ iAmNotInTheSchema: true });
    thing.save(); // iAmNotInTheSchema 不会保存到数据库中

    // 设置为 false
    var thingSchema = new Schema({..}, { strict: false });
    var thing = new Thing({ iAmNotInTheSchema: true });
    thing.save(); // 现在 iAmNotInTheSchema 可以保存到数据库
    ```

    同样会影响 `doc.set()` 设置的属性值。

    ```javascript
    var thingSchema = new Schema({..})
    var Thing = mongoose.model('Thing', thingSchema);
    var thing = new Thing;
    thing.set('iAmNotInTheSchema', true);
    thing.save(); // iAmNotInTheSchema 没有保存到数据库
    ```

    通过传递第二个布尔值属性，在model实例层，值可能会被覆盖。
    This value can be overridden at the model instance level by passing a second
    boolean argument:

    ```javascript
    var Thing = mongoose.model('Thing');
    var thing = new Thing(doc, true);  // 打开 strict 模式
    var thing = new Thing(doc, false); // 关闭 strict 模式
    ```

    `strict` 选项页可以设置为 `throw`。
    此时如果设置了非法的值，将会报错。

    _注意：如果不设置schema选项，则任何设置在实例上，并且在schema上不存在的键值对总会被忽略。_

    ```javascript
    var thingSchema = new Schema({..})
    var Thing = mongoose.model('Thing', thingSchema);
    var thing = new Thing;
    thing.iAmNotInTheSchema = true;
    thing.save(); // iAmNotInTheSchema 永远不会存储到数据库中
    ```

    <h3 id="strictQuery">选项: strictQuery</h3>

    为了向下兼容，对于`queries`，设置了`strict` 选项，将**不能**用于参数过滤。

    ```javascript
    const mySchema = new Schema({ field: Number }, { strict: true });
    const MyModel = mongoose.model('Test', mySchema);

    // Mongoose 将 **不会** 过滤出 `notInSchema: 1` 的文档, 尽管 `strict: true`
    MyModel.find({ notInSchema: 1 });
    ```

    `strict` 选项只用户数据更新。

    ```javascript
    // 如果 `strict` 的值不是 `false`
    // 则 Mongoose 将会从更新中剔除 `notInSchema` 的值
    MyModel.updateMany({}, { $set: { notInSchema: 1 } });
    ```

    Mongoose 有一个单独的 `strictQuery` 选项来切换严格模式是否可以进行过滤查询。

    ```javascript
    const mySchema = new Schema({ field: Number }, {
      strict: true,
      strictQuery: true // 打开严格模式下的过滤查询
    });
    const MyModel = mongoose.model('Test', mySchema);

    // 因为 `strictQuery` 的值为 `true`
    // 所以 Mongoose 将会剔除 `notInSchema: 1` 的值
    MyModel.find({ notInSchema: 1 });
    ```

    <h3 id="toJSON"><a href="#toJSON">选项: toJSON</a></h3>

    准确的说，和 [toObject](#toObject) 选项一样，
    但是只适用于文档的 `toJSON` 方法被调用的时候。

    ```javascript
    var schema = new Schema({ name: String });
    schema.path('name').get(function (v) {
      return v + ' is my name';
    });
    schema.set('toJSON', { getters: true, virtuals: false });
    var M = mongoose.model('Person', schema);
    var m = new M({ name: 'Max Headroom' });
    console.log(m.toObject()); // { _id: 504e0cd7dd992d9be2f20b6f, name: 'Max Headroom' }
    console.log(m.toJSON()); // { _id: 504e0cd7dd992d9be2f20b6f, name: 'Max Headroom is my name' }
    // 只要toJSON被调用，js对象无论何时都会被字符串化:
    console.log(JSON.stringify(m)); // { "_id": "504e0cd7dd992d9be2f20b6f", "name": "Max Headroom is my name" }
    ```

    想要了解所有支持`toJSON/toObject`的选项，请查看 [这里](/docs/api.html#document_Document-toObject)。

    <h3 id="toObject"><a href="#toObject">选项: toObject</a></h3>

    Documents have a [toObject](/docs/api.html#document_Document-toObject) method
    which converts the mongoose document into a plain javascript object. This
    method accepts a few options. Instead of applying these options on a
    per-document basis we may declare the options here and have it applied to
    all of this schemas documents by default.

    To have all virtuals show up in your `console.log` output, set the
    `toObject` option to `{ getters: true }`:

    ```javascript
    var schema = new Schema({ name: String });
    schema.path('name').get(function (v) {
      return v + ' is my name';
    });
    schema.set('toObject', { getters: true });
    var M = mongoose.model('Person', schema);
    var m = new M({ name: 'Max Headroom' });
    console.log(m); // { _id: 504e0cd7dd992d9be2f20b6f, name: 'Max Headroom is my name' }
    ```

    查看所有可用的 `toObject` 选项，请看[这里](/docs/api.html#document_Document-toObject)。

    <h3 id="typeKey"><a href="#typeKey">选项: typeKey</a></h3>

    默认情况下，如果在schema中的对象如果有一个 `type` 的键，
    则 mongoose 会将其做为类型声明来处理。
    By default, if you have an object with key 'type' in your schema, mongoose
    will interpret it as a type declaration.

    ```javascript
    // Mongoose 将会认为 'loc' 是一个 'String'
    var schema = new Schema({ loc: { type: String, coordinates: [Number] } });
    ```

    对于像 [geoJSON](http://docs.mongodb.org/manual/reference/geojson/) 
    这样的应用，`type` 属性将会非常重要。
    你可以通过设置 'typeKey' 属性值，来找到 mongoose 正在使用的那个键的类型声明。

    ```javascript
    var schema = new Schema({
      // Mongoose 将其解释为 'loc 是一个拥有两个键(type 和 coordinates)的对象'
      loc: { type: String, coordinates: [Number] },
      // Mongoose 将其解释为 'name 是一个 String'
      name: { $type: String }
    }, { typeKey: '$type' }); // '$type' 是这个对象的类型声明的键
    ```

    <h3 id="validateBeforeSave"><a href="#validateBeforeSave">选项: validateBeforeSave</a></h3>

    默认情况下，文档会在保存到数据库之前自动验证。
    这将会防止不合法的的文档保存到数据库中。
    如果你想要手动控制验证，并希望不用验证就可以保存数据，
    你可以设置 `validateBeforeSave` 为 `false`。

    ```javascript
    var schema = new Schema({ name: String });
    schema.set('validateBeforeSave', false);
    schema.path('name').validate(function (value) {
      return v != null;
    });
    var M = mongoose.model('Person', schema);
    var m = new M({ name: null });
    m.validate(function(err) {
      console.log(err); // 将会提示null是不允许的
    });
    m.save(); // 尽管值不合法，但是保存仍然是成功的
    ```

    <h3 id="versionKey"><a href="#versionKey">选项: versionKey</a></h3>

    第一次通过Mongoose创建的文档，都会被设置一个 `versionKey` 属性。
    这个属性值包含内部文档的[revision](http://aaronheckmann.tumblr.com/post/48943525537/mongoose-v3-part-1-versioning)。
    `versionKey`选项是一个用于版本控制，正在使用路径的字符串，默认为 `__v`。
    如果你的应用有冲突，你可以这样配置：

    ```javascript
    var schema = new Schema({ name: 'string' });
    var Thing = mongoose.model('Thing', schema);
    var thing = new Thing({ name: 'mongoose v3' });
    thing.save(); // { __v: 0, name: 'mongoose v3' }

    // 自定义 versionKey
    new Schema({..}, { versionKey: '_somethingElse' })
    var Thing = mongoose.model('Thing', schema);
    var thing = new Thing({ name: 'mongoose v3' });
    thing.save(); // { _somethingElse: 0, name: 'mongoose v3' }
    ```

    文档版本控制也可以通过将 `versionKey` 设置为 `false` 来禁用。

    _不要禁用版本控制，除非你知道[你正在做什么](http://aaronheckmann.tumblr.com/post/48943525537/mongoose-v3-part-1-versioning)。_

    ```javascript
    new Schema({..}, { versionKey: false });
    var Thing = mongoose.model('Thing', schema);
    var thing = new Thing({ name: 'no versioning please' });
    thing.save(); // { name: 'no versioning please' }
    ```

    <h3 id="collation"><a href="#collation">选项: collation</a></h3>

    为每个查询（query）和聚合（aggregation）设置一个默认的
    [collation](https://docs.mongodb.com/manual/reference/collation/)
    这里是一个对新手友好的 collation 概述。

    ```javascript
    var schema = new Schema({
      name: String
    }, { collation: { locale: 'en_US', strength: 1 } });

    var MyModel = db.model('MyModel', schema);

    MyModel.create([{ name: 'val' }, { name: 'Val' }]).
      then(function() {
        return MyModel.find({ name: 'val' });
      }).
      then(function(docs) {
        // 两个文档，`docs` 都将包含, 因为 `strength: 1` 意味着
        // MongoDB 在匹配时将忽略大小写。
      });
    ```

    <h3 id="skipVersioning"><a href="#skipVersioning">选项: skipVersioning</a></h3>

    `skipVersioning`允许从版本控制中移除路径信息（也就是说，尽管路径发生变化，内部版本也不会增加）。
    除非你知道你在做什么，否则请不要这么做。
    对于子文档，请使用完整路径在父文档中添加。

    ```javascript
    new Schema({..}, { skipVersioning: { dontVersionMe: true } });
    thing.dontVersionMe.push('hey');
    thing.save(); // version 没有增加
    ```

    <h3 id="timestamps"><a href="#timestamps">选项: timestamps</a></h3>

    如果设置了`timestamps`属性，Mongoose将会在你的schema中，
    分配 `createdAt` 和 `updatedAt` 字段，
    这两个值得类型为 [Date](./api.html#schema-date-js)。

    默认情况下，这两个字段的名称为 `createdAt` 和 `updatedAt`，
    可以通过设置 `timestamps.createdAt` 和 `timestamps.updatedAt`的值，来自定义字段名。

    ```javascript
    var thingSchema = new Schema({..}, { timestamps: { createdAt: 'created_at' } });
    var Thing = mongoose.model('Thing', thingSchema);
    var thing = new Thing();
    thing.save(); // `created_at` & `updatedAt`将会被添加
    ```

    <h3 id="useNestedStrict"><a href="#useNestedStrict">选项: useNestedStrict</a></h3>

    在Mongoose 4中，`update()` 和 `findOneAndUpdate()`
    只会检查顶级schema的严格模式的配置。

    ```javascript
    var childSchema = new Schema({}, { strict: false });
    var parentSchema = new Schema({ child: childSchema }, { strict: 'throw' });
    var Parent = mongoose.model('Parent', parentSchema);
    Parent.update({}, { 'child.name': 'Luke Skywalker' }, function(error) {
      // 因为parentSchema有`strict: throw`属性
      // 而且`childSchema` 有 `strict: false` 属性，所以会报错。
    });

    var update = { 'child.name': 'Luke Skywalker' };
    var opts = { strict: false };
    Parent.update({}, update, opts, function(error) {
      // 因为传递了 `strict: false` 参数给 `update()`，
      // 覆盖了父 schema。
    });
    ```

    如果你设置 `useNestedStrict` 为 `true`，
    mongoose更新时，将会使用子schema的 `strict` 配置。

    ```javascript
    var childSchema = new Schema({}, { strict: false });
    var parentSchema = new Schema({ child: childSchema },
      { strict: 'throw', useNestedStrict: true });
    var Parent = mongoose.model('Parent', parentSchema);
    Parent.update({}, { 'child.name': 'Luke Skywalker' }, function(error) {
      // 会运行
    });
    ```

    <h3 id="plugins"><a href="#plugins">插件化</a></h3>

    Schema可以[插件化](./plugins.html)，
    这样我们就能够把重复使用的部分打包成插件，
    从而可以在社区或者项目之间共享。

    <h3 id="next">接下来</h3>

    现在我们已经对`Schemas`有一个大概的了解，
    接下来的内容为[SchemaTypes](/docs/schematypes.html)。
