extends layout

block content
  :markdown
    <h2 id="schematypes"><a href="#schematypes">模式类型（SchemaTypes）</a></h2>

    Schema类型控制
    [defaults](./api.html#schematype_SchemaType-default)、
    [validation](./api.html#schematype_SchemaType-validate)、
    [getters](./api.html#schematype_SchemaType-get)、
    [setters](./api.html#schematype_SchemaType-set)、
    用于[queries](./api.html#query-js) 的 [field selection defaults](./api.html#schematype_SchemaType-select)
    以及其他String和Number通用的特性的定义。

    下面的类型在mongoose中都是合法的Schema类型。

    - [String](./api.html#schema-string-js)
    - [Number](./api.html#schema-number-js)
    - [Date](./api.html#schema-date-js)
    - [Buffer](./api.html#schema-buffer-js)
    - Boolean
    - Mixed
    - [Objectid](./api.html#schema-objectid-js)
    - Array
    - Decimal128

    <h4>例子</h4>

    ```javaScript
    var schema = new Schema({
      name:    String,
      binary:  Buffer,
      living:  Boolean,
      updated: { type: Date, default: Date.now },
      age:     { type: Number, min: 18, max: 65 },
      mixed:   Schema.Types.Mixed,
      _someId: Schema.Types.ObjectId,
      decimal: Schema.Types.Decimal128,
      array:      [],
      ofString:   [String],
      ofNumber:   [Number],
      ofDates:    [Date],
      ofBuffer:   [Buffer],
      ofBoolean:  [Boolean],
      ofMixed:    [Schema.Types.Mixed],
      ofObjectId: [Schema.Types.ObjectId],
      ofArrays:   [[]],
      ofArrayOfNumbers: [[Number]],
      nested: {
        stuff: { type: String, lowercase: true, trim: true }
      }
    })

    // 使用案例

    var Thing = mongoose.model('Thing', schema);

    var m = new Thing;
    m.name = 'Statue of Liberty';
    m.age = 125;
    m.updated = new Date;
    m.binary = new Buffer(0);
    m.living = false;
    m.mixed = { any: { thing: 'i want' } };
    m.markModified('mixed');
    m._someId = new mongoose.Types.ObjectId;
    m.array.push(1);
    m.ofString.push("strings!");
    m.ofNumber.unshift(1,2,3,4);
    m.ofDates.addToSet(new Date);
    m.ofBuffer.pop();
    m.ofMixed = [1, [], 'three', { four: 5 }];
    m.nested.stuff = 'good';
    m.save(callback);
    ```

    <h3 id="schematype-options"><a href="#schematype-options">SchemaType 配置</a></h3>

    你可以直接用`type`或者带有`type`属性的对象，来声明一个`schema`。

    ```javascript
    var schema1 = new Schema({
      test: String // `test`是获取type属性String的一个方式
    });

    var schema2 = new Schema({
      test: { type: String } // `test`是获取type属性String的一个方式
    });
    ```

    对于 `type` 属性，你可以向一个字段添加额外的属性。
    例如，如果你想在保存前让字符串小写：

    ```javascript
    var schema2 = new Schema({
      test: {
        type: String,
        lowercase: true // 总会转换 `test` 为小写形式
      }
    });
    ```

    `lowercase` 属性只对于字符串才有作用。
    有一些适用于所有schema类型的选项，
    而有一些只适用特定的schema类型。

    <h5>所有的 `Schema` 类型</h5>

    * `required`: boolean | function, `true` 时会为这个属性添加一个[required validator](./validation.html#built-in-validators)。
    * `default`: Any | function, 默认值。如果值为 `function`，返回的值将用于默认值。
    * `select`: boolean, 对于query特定的默认 [映射（projections）](https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/)。
    * `validate`: function, 为这个属性添加一个 [validator 函数](./validation.html#built-in-validators)。
    * `get`: function, 利用[`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)为该属性自定义一个getter。
    * `set`: function, 使用[`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)为该属性定义一个setter。
    * `alias`: string, 只适用于 `mongoose >= 4.10.0` 的版本。 即别名，定义一个[虚拟属性（virtual）](./guide.html#virtuals)来获取指定路径的值。

    ```javascript
    var numberSchema = new Schema({
      integerOnly: {
        type: Number,
        get: v => Math.round(v),
        set: v => Math.round(v),
        alias: 'i'
      }
    });

    var Number = mongoose.model('Number', numberSchema);

    var doc = new Number();
    doc.integerOnly = 2.001;
    doc.integerOnly; // 2
    doc.i; // 2
    doc.i = 3.001;
    doc.integerOnly; // 3
    doc.i; // 3
    ```

    <h5>索引（Indexes）</h5>

    你可以使用schema类型的配置来定义[MongoDB 索引](https://docs.mongodb.com/manual/indexes/)。

    * `index`: boolean，是否在该属性上定义 [index](https://docs.mongodb.com/manual/indexes/)。
    * `unique`: boolean，是否在该属性上定义 [unique index](https://docs.mongodb.com/manual/core/index-unique/)。
    * `sparse`: boolean，是否在该属性上定义 [sparse index](https://docs.mongodb.com/manual/core/index-sparse/)。

    ```javascript
    var schema2 = new Schema({
      test: {
        type: String,
        index: true,
        unique: true // 如果配置`unique: true`，索引为唯一的 
        // 如果配置了`unique: true`，则`index: true`是可选的
      }
    });
    ```

    <h5>字符串（String）</h5>

    * `lowercase`: boolean, 是否对该值总是调用 `.toLowerCase()`。
    * `uppercase`: boolean, 是否对该值总是调用 `.toUpperCase()`。
    * `trim`: boolean, 是否对该值总是调用 `.trim()`。
    * `match`: RegExp, 创建一个 [validator](./validation.html)，根据指定的正则表达式来检查该值。
    * `enum`: Array, 创建一个 [validator](./validation.html) ，检查该值是否在这个数组中。

    <h5>数字（Number）</h5>

    * `min`: Number, creates a [validator](./validation.html) that checks if the value is greater than or equal to the given minimum.
    * `max`: Number, creates a [validator](./validation.html) that checks if the value is less than or equal to the given maximum.

    <h5>日期（Date）</h5>

    * `min`: Date
    * `max`: Date

    <h3 id="usage-notes"><a href="#usage-notes">使用注意事项（Usage notes）</a></h3>

    <h4>日期（Dates）</h4>

    [ `Date` 的内建方法](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) are [__not__ hooked into](https://github.com/Automattic/mongoose/issues/1598) the mongoose change tracking logic which in English means that if you use a `Date` in your document and modify it with a method like `setMonth()`, mongoose will be unaware of this change and `doc.save()` will not persist this modification. If you must modify `Date` types using built-in methods, tell mongoose about the change with `doc.markModified('pathToYourDate')` before saving.

    ```javascript
    var Assignment = mongoose.model('Assignment', { dueDate: Date });
    Assignment.findOne(function (err, doc) {
      doc.dueDate.setMonth(3);
      doc.save(callback); // THIS DOES NOT SAVE YOUR CHANGE

      doc.markModified('dueDate');
      doc.save(callback); // works
    })
    ```

    <h4 id="mixed">混合型（Mixed）</h4>

    一种允许任何类型的SchemaType，它的灵活性会带来难以维护的后果。
    可以通过传入 `Schema.Type.Mixed`或者 `{}`设置混合型。
    下面几种方式效果是一样的：

    ```javascript
    var Any = new Schema({ any: {} });
    var Any = new Schema({ any: Object });
    var Any = new Schema({ any: Schema.Types.Mixed });
    ```

    因为它缺少schema类型，你可以随意改变其值，
    但是Mongoose将失去自动监测和保存变化的能力。
    通过调用document的`.markModified(path)`方法，
    传入你刚刚改变的混合型的path，来告诉Mongoose发生变化后混合型的值。

    ```javascript
    person.anything = { x: [3, 4, { y: "changed" }] };
    person.markModified('anything');
    person.save(); // 现在anything将会被保存
    ```

    <h4 id="objectids">id对象（ObjectIds）</h4>

    在声明中使用 `Schema.Types.ObjectId`，来定义ObjectId类型。

    ```javascript
    var mongoose = require('mongoose');
    var ObjectId = mongoose.Schema.Types.ObjectId;
    var Car = new Schema({ driver: ObjectId });
    // 或者为了向下兼容v2版本，可以直接使用 Schema.ObjectId
    ```

    <h4 id="arrays">数组（Arrays）</h4>

    支持创建[SchemaTypes](./api.html#schema_Schema.Types)或[Sub-Documents](./subdocs.html)的数组。

    Provide creation of arrays of [SchemaTypes](./api.html#schema_Schema.Types)
    or [Sub-Documents](./subdocs.html).

    ```javascript
    var ToySchema = new Schema({ name: String });
    var ToyBox = new Schema({
      toys: [ToySchema],
      buffers: [Buffer],
      string:  [String],
      numbers: [Number]
      // ... 等等
    });
    ```

    注意：指定空数组等同于 `Mixed`。
    下面所有代码都是创建数组的 `Mixed`：

    ```javascript
    var Empty1 = new Schema({ any: [] });
    var Empty2 = new Schema({ any: Array });
    var Empty3 = new Schema({ any: [Schema.Types.Mixed] });
    var Empty4 = new Schema({ any: [{}] });
    ```

    数组都会有一个默认值，值为 `[]`（空数组）。

    ```javascript
    var Toy = mongoose.model('Test', ToySchema);
    console.log((new Toy()).toys); // []
    ```

    为了覆盖默认值，你需要把默认值设置为 `undefined`

    To overwrite this default, you need to set the default value to `undefined`

    ```javascript
    var ToySchema = new Schema({
      toys: {
        type: [ToySchema],
        default: undefined
      }
    });
    ```

    <h3 id="customtypes"><a href="#customtypes">创建自定义类型（Creating Custom Types）</a></h3>

    Mongoose也可以通过SchemaTypes进行扩展。
    你可以在[plugins](http://plugins.mongoosejs.io)搜索兼容的类型，
    比如[mongoose-long](https://github.com/aheckmann/mongoose-long)、
    [mongoose-int32](https://github.com/vkarpov15/mongoose-int32)、
    和
    [其他](https://github.com/aheckmann/mongoose-function)
    [类型](https://github.com/OpenifyIt/mongoose-types)。

    <h3 id="path"><a href="#path">`schema.path()`函数</a></h3>

    函数 `schema.path()` 返回指定path的实例化schema。

    ```javascript
    var sampleSchema = new Schema({ name: { type: String, required: true } });
    console.log(sampleSchema.path('name'));
    // 输出形式如下：
    /**
     * SchemaString {
     *   enumValues: [],
     *   regExp: null,
     *   path: 'name',
     *   instance: 'String',
     *   validators: ...
     */
     ```

    你可以使用这个函数来监视指定path的schema类型，
    包括它的校验器，以及它的类型。

    <h3 id="next"><a href="#next">接下来</a></h3>

    现在我们已经讲完了 `SchemaTypes`，接下来让我们看一下[Models](/docs/models.html)。
