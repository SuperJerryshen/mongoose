extends layout

block content
  :markdown
    ## 填充(Populate)

    MongoDB在 >= 3.2 的版本中，加入了类似链接的[$lookup](https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/) 集成算子。
    Mongoose有一个更强大替代方案叫做 `populate()`，它可以让你在其他集合中查询文档。

    填充（Population）就是自动从其他collection的document，替换规定的路径下的document的过程。
    我们可以填充单个的document，多个document，纯对象，多级纯对象，或者从查询返回的所有对象。
    让我们看一下一些例子。

    ```javascript
    var mongoose = require('mongoose');
    var Schema = mongoose.Schema;

    var personSchema = Schema({
      _id: Schema.Types.ObjectId,
      name: String,
      age: Number,
      stories: [{ type: Schema.Types.ObjectId, ref: 'Story' }]
    });

    var storySchema = Schema({
      author: { type: Schema.Types.ObjectId, ref: 'Person' },
      title: String,
      fans: [{ type: Schema.Types.ObjectId, ref: 'Person' }]
    });

    var Story = mongoose.model('Story', storySchema);
    var Person = mongoose.model('Person', personSchema);
    ```

    目前，我们已经创建了两个[Models](./models.html)。
    `Person` model的`stories`字段设置为一个`ObjectId`的数组。
    `ref`选项告诉了Mongoose在填充时，会使用哪一个model。
    在我们的例子中，就是`Story`model。
    所有我们在这里存储的`_id`，必须是来自于`Story`model中文档的_id。

    **注意**: 虽然`ObjectId`, `Number`, `String`, and `Buffer`作为refs是合法的。
    但是，你应该使用 `ObjectId`，除非你是一个高级用户，而且有足够的理由使用它。

    <h3 id="saving-refs"><a href="#saving-refs">保存 refs</a></h3>

    向其他文档保存refs，和其他保存值得方法一样，只是指定了 `_id` 的值：

    ```javascript
    var author = new Person({
      _id: new mongoose.Types.ObjectId(),
      name: 'Ian Fleming',
      age: 50
    });

    author.save(function (err) {
      if (err) return handleError(err);

      var story1 = new Story({
        title: 'Casino Royale',
        author: author._id    // assign the _id from the person
      });

      story1.save(function (err) {
        if (err) return handleError(err);
        // thats it!
      });
    });
    ```

    <h3 id="population"><a href="#population">填充</a></h3>

    目前，我们还没有做太多不一样的事情。我们只不过创建了 `Person` 和 `Story`。
    现在让我们看一下如何使用查询构建，来填充story的 `author` ：

    ```javascript
    Story.
      findOne({ title: 'Casino Royale' }).
      populate('author').
      exec(function (err, story) {
        if (err) return handleError(err);
        console.log('The author is %s', story.author.name);
        // 打印 "The author is Ian Fleming"
      });
    ```

    通过在返回值之前，数据库会运行一个单独的查询，填充路径就不再是初始的 `_id`了，
    他们的值将会被mongoose文档的返回值代替。

    数组形式的refs也一样。
    只是调用 [populate](./api.html#query_Query-populate) 方法的返回值也会是数组形式，
    每一个`_id`都会被单独的文档_代替_。

    <h3 id="setting-populated-fields"><a href="#setting-populated-fields">设置填充的字段</a></h3>

    在 >= 4.0 的Mongoose版本中，你也可以手动填充一个字段。

    ```javascript
    Story.findOne({ title: 'Casino Royale' }, function(error, story) {
      if (error) {
        return handleError(error);
      }
      story.author = author;
      console.log(story.author.name); // 打印 "Ian Fleming"
    });
    ```

    <h3 id="field-selection"><a href="#field-selection">字段选择</a></h3>

    如果我们只想返回一些特定的字段，该怎么办呢？
    可以通过在调用`populate`方法时，
    传入[field name syntax](./api.html#query_Query-select)作为第二个参数就行了：

    ```javascript
    Story.
      findOne({ title: /casino royale/i }).
      populate('author', 'name'). // only return the Persons name
      exec(function (err, story) {
        if (err) return handleError(err);

        console.log('The author is %s', story.author.name);
        // prints "The author is Ian Fleming"

        console.log('The authors age is %s', story.author.age);
        // prints "The authors age is null'
      });
    ```

    <h3 id="populating-multiple-paths"><a href="#populating-multiple-paths">填充多路径（Populating Multiple Paths）</a></h3>

    如果我们想同时填充多个路径，该怎么办呢？

    ```javascript
    Story.
      find(...).
      populate('fans').
      populate('author').
      exec();
    ```

    我们在相同路径，调用 `populate()` 多次时，只有最后一个才会生效。

    ```javascript
    // 第二次调用的`populate()`会覆盖第一次的
    // 因为他们都是'fans'的填充
    Story.
      find().
      populate({ path: 'fans', select: 'name' }).
      populate({ path: 'fans', select: 'email' });
    // 等同于：
    Story.find().populate({ path: 'fans', select: 'email' });
    ```

    <h3 id="query-conditions"><a href="#query-conditions">查询条件和其他设置</a></h3>

    如果我们根据年龄填充我们的`fans`，
    只选择了他们的名字，最多返回五个时，会怎么样呢？

    ```javascript
    Story.
      find(...).
      populate({
        path: 'fans',
        match: { age: { $gte: 21 }},
        // 声明去掉 `_id`, 详见 http://bit.ly/2aEfTdB
        select: 'name -_id',
        options: { limit: 5 }
      }).
      exec();
    ```

    <h3 id="refs-to-children"><a href="#refs-to-children">子 Refs</a></h3>

    如果使用 `author` 对象，我们可能无论如何都需要查找，但是却无法获取`stories`的列表。
    这是因为 `story` 对象曾经被推到 `author.stories`过。
    We may find however, if we use the `author` object, we are unable to get a
    list of the stories. This is because no `story` objects were ever 'pushed'
    onto `author.stories`.

    这里有两个观点。第一，你可能需要 `author` 知道哪些 `stories` 是他们自己的。
    通常情况下，通过一个父节点，你的 `Schema` 应该是一对多关系中的多。
    但是，如果你有必要去获得子节点的数组，你可以像下面这样，
    通过 `push()` 向你的数组推document。
    There are two perspectives here. First, you may want the `author` know
    which stories are theirs. Usually, your schema should resolve
    one-to-many relationships by having a parent pointer in the 'many' side.
    But, if you have a good reason to want an array of child pointers, you
    can `push()` documents onto the array as shown below.

    ```javascript
    author.stories.push(story1);
    author.save(callback);
    ```

    你可以链式运行 `find` 和 `populate`：

    ```javascript
    Person.
      findOne({ name: 'Ian Fleming' }).
      populate('stories'). // 只有设置了ref才会起作用
      exec(function (err, person) {
        if (err) return handleError(err);
        console.log(person);
      });
    ```

    如果设置了两个指针是有问题的，可能会导致其失去同步。
    我们可以跳过填充，直接在运行 `find()` 找到我们需要的stories。

    ```javascript
    Story.
      find({ author: author._id }).
      exec(function (err, stories) {
        if (err) return handleError(err);
        console.log('The stories are an array: ', stories);
      });
    ```

    通过[query population](./api.html#query_Query-populate)返回的文档是完全函数化的。
    除非规定了[lean](./api.html#query_Query-lean)值，
    都可以通过`remove`或`save`删除和保存文档。
    不要把这些和[sub docs](./subdocs.html)搞混了。
    当调用`remove`方法时要当心一点，因为你不仅会把他从数组删除，还会把他从数据库中删除。

    <h3 id="populate_an_existing_mongoose_document"><a href="#populate_an_existing_mongoose_document">填充已生成的文档</a></h3>

    如果我们想要填充一个已经生成过的mongoose文档，
    在**mongoose >= 3.6**时，支持
    [document#populate()](./api.html#document_Document-populate)方法。

    <h3 id="populate_multiple_documents"><a href="#populate_multiple_documents">填充多个已生成的文档</a></h3>

    如果我们有一个或多个文档，或者普通的对象
    (_类似于 [mapReduce](./api.html#model_Model.mapReduce) 的输出_)，
    可以通过使用 [Model.populate()](./api.html#model_Model.populate)
    （**mongoose >= 3.6 可用**） 填充他们。
    这就是`document#populate()` 和 `query#populate()`填充文档的使用场景。

    <h3 id="deep-populate"><a href="#deep-populate">多级填充</a></h3>

    如果你有一个user的schema，它保存着user朋友的踪迹。

    ```javascript
    var userSchema = new Schema({
      name: String,
      friends: [{ type: ObjectId, ref: 'User' }]
    });
    ```

    填充让你可以获取user好友的列表，
    但是你还想获取user好友的好友时，该怎么办呢？
    你可以通过配置 `populate`选项，
    告诉mongoose去填充所有user朋友的 `friends` 数组：

    ```javascript
    User.
      findOne({ name: 'Val' }).
      populate({
        path: 'friends',
        // 获取朋友的朋友的信息 - 对每一个friend填充 'friends' 信息
        populate: { path: 'friends' }
      });
    ```

    <h3 id="cross-db-populate"><a href="#cross-db-populate">通过数据库填充</a></h3>

    现在有一个表示事件的schmea和一个表示会话的schema。
    每一个事件有一个对应的会话索引。

    ```javascript
    var eventSchema = new Schema({
      name: String,
      // 对应的会话 id
      // 注意：这里没有ref
      conversation: ObjectId
    });
    var conversationSchema = new Schema({
      numMessages: Number
    });
    ```

    假设事件和会话存储在分开的MongoDB实例中。

    ```javascript
    var db1 = mongoose.createConnection('localhost:27000/db1');
    var db2 = mongoose.createConnection('localhost:27001/db2');

    var Event = db1.model('Event', eventSchema);
    var Conversation = db2.model('Conversation', conversationSchema);
    ```

    在这种情况下，你将**不能**正常使用 `populate()` 方法。
    `conversation` 字段总会返回 `null`，
    因为 `populate()` 不知道使用哪一个 model。
    但是，[你可以明确指定 model](./api.html#model_Model.populate)。

    ```javascript
    Event.
      find().
      populate({ path: 'conversation', model: Conversation }).
      exec(function(error, docs) { /* ... */ });
    ```

    这就是"跨数据库填充"，因为他让你可以通过
    MongoDB数据库填充数据，甚至通过MongoDB实例。

    <h3 id="dynamic-ref"><a href="#dynamic-ref">动态References</a></h3>

    Mongoose 可以同时从不同的集合填充数据。
    也就是说，拥有 "connections" 数组的user schema，
    是可以连接到其他 user 或 organization。

    ```javascript
    var userSchema = new Schema({
      name: String,
      connections: [{
        kind: String,
        item: { type: ObjectId, refPath: 'connections.kind' }
      }]
    });

    var organizationSchema = new Schema({ name: String, kind: String });

    var User = mongoose.model('User', userSchema);
    var Organization = mongoose.model('Organization', organizationSchema);
    ```

    上例中的`refPath`属性，意思是mongoose 会向上查找 `connections.kind` 路径，
    来决定使用哪一个model来进行`populate()`都会被单独的文档_代替_。
    也就是说，`refPath` 可以让 `ref` 属性成为动态的。

    ```javascript
    // 我们有一个 organization:
    // `{ _id: ObjectId('000000000000000000000001'), name: "Guns N' Roses", kind: 'Band' }`
    // 和两个 users:
    // {
    //   _id: ObjectId('000000000000000000000002')
    //   name: 'Axl Rose',
    //   connections: [
    //     { kind: 'User', item: ObjectId('000000000000000000000003') },
    //     { kind: 'Organization', item: ObjectId('000000000000000000000001') }
    //   ]
    // },
    // {
    //   _id: ObjectId('000000000000000000000003')
    //   name: 'Slash',
    //   connections: []
    // }
    User.
      findOne({ name: 'Axl Rose' }).
      populate('connections.item').
      exec(function(error, doc) {
        // doc.connections[0].item is a User doc
        // doc.connections[1].item is an Organization doc
      });
    ```

    <h3 id="populate-virtuals"><a href="#populate-virtuals">填充虚拟类型 (Populate Virtuals)</a></h3>

    _4.5.0 版本新增_

    目前，你已经可以只通过 `_id` 填充数据。
    然而，有时候就不是正确的选择了。尤其是当
    [数组是 MongoDB anti-pattern时，其增长是没有限制的](https://docs.mongodb.com/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/)时。
    使用mongoose 虚拟类型时，你可以在文档之间定义更加精细的关系。

    ```javascript
    var PersonSchema = new Schema({
      name: String,
      band: String
    });

    var BandSchema = new Schema({
      name: String
    });
    BandSchema.virtual('members', {
      ref: 'Person', // 使用的 model
      localField: 'name', // 从 `localField` 中查找
      foreignField: 'band', // 等同于 `foreignField`
      // 如果 `justOne` 的值为 true, 'members' 将会是单个文档
      // false时，则为一个数组
      // `justOne` 默认值为 false
      justOne: false
    });

    var Person = mongoose.model('Person', PersonSchema);
    var Band = mongoose.model('Band', BandSchema);

    /**
     * 假设你有两个 bands："Guns N' Roses" 和 "Motley Crue"
     * 和四个 people: "Axl Rose" 、 带有"Guns N' Roses" 的 "Slash"
     * "Vince Neil" 和 带有"Motley Crue" 的 "Nikki Sixx"
     */
    Band.find({}).populate('members').exec(function(error, bands) {
      /* `bands.members`为 `Person` 实例的一个数组 */
    });
    ```

    注意，`toJSON()`的返回值默认_不包含_虚拟类型的值。
    如果你想要填充虚拟属性时，又需要让类似于 Express 的 [`res.json()` 函数](http://expressjs.com/en/4x/api.html#res.json)这样的
    `JSON.stringify()`函数中含有这个虚拟属性，
    可以通过在schema的`toJSON`选项中设置 `virtuals: true`。

    ```javascript
    // 设置 `virtuals: true`，所以 `res.json()` 又起作用了
    var BandSchema = new Schema({
      name: String
    }, { toJSON: { virtuals: true } });
    ```

    如果你在使用填充投影（populate projections），
    请确认`foreignField`包含在projection中。

    ```javascript
    Band.
      find({}).
      populate({ path: 'members', select: 'name' }).
      exec(function(error, bands) {
        // 不起作用, 在projection中， `band` 没有被选中
      });

    Band.
      find({}).
      populate({ path: 'members', select: 'name band' }).
      exec(function(error, bands) {
        // 起作用, 外来的字段 `band` 是被选中的
      });
    ```

    ### 下一步

    既然你已经掌握了 `populate()`，
    就让我们接着了解一下 [鉴别器 (discriminators)](/docs/discriminators.html)。
