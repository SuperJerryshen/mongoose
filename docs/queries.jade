extends layout

block content
  :markdown
    ## 查询(Queries)

    文档可以通过一些[models](./models.html)的辅助方法进行检索。

    任何 [model](./api.html#model_Model) [牵涉](./api.html#model_Model.find)到[指定](./api.html#model_Model.findById) [查询](./api.html#model_Model.count) [条件](./api.html#model_Model.update)
    的方法的执行被分为两种：

    当有一个回调函数时：

    - 已传入, 操作会立即执行，并将结果传递给回调。
    - 未传入, 返回一个[Query](./api.html#query-js)实例，其提供特殊的查询构建接口。

    一次[查询](./api.html#query-js)拥有`.then()`函数，所以可以用作一个promise。

    当通过传入一个回调函数执行查询时，你就指定了你的查询为一个JSON文档。
    这个JSON文档的语法和[MongoDB shell](http://docs.mongodb.org/manual/tutorial/query-documents/)的是一样的。

    ```javascript
    var Person = mongoose.model('Person', yourSchema);

    // 查询每一个last name匹配 'Ghost' 的文档，并选择了 `name` 和 `occupation` 字段
    Person.findOne({ 'name.last': 'Ghost' }, 'name occupation', function (err, person) {
      if (err) return handleError(err);
      // 打印 "Space Ghost is a talk show host".
      console.log('%s %s is a %s.', person.name.first, person.name.last,
        person.occupation);
    });
    ```

    我们可以看到，查询会立刻执行，并将结果传递给回调函数。
    在Mongoose中的所有回调会使用这个格式：`callback(error, result)`。
    如果执行查询时出现错误，参数 `error` 将会包含一个错误文档，`result` 会变为 `null`。
    如果查询成功，参数 `erro` 会变为 `null`，`result` 将被查询结果填充。

    在Mongoose的query中传入回调，不论是哪里，这个回调都会遵循 `callback(error, results)` 的格式。
    `results` 取决于具体的执行：
    对于 `findOne()`，它是一个[可能是null的单个document](./api.html#model_Model.findOne)，
    `find()` 是一个 [文档列表](./api.html#model_Model.find)，
    `count()` 是[文档的数量](./api.html#model_Model.count)，
    `update()` 是[影响到的文档数量](./api.html#model_Model.update)等等。
    [Models 的 API 文档](./api.html#model-js)提供有关传递回调参数的更多内容。

    现在让我们看一下不传递回调将会发生什么：

    ```javascript
    // 查询每一个last name匹配'Ghost'的人
    var query = Person.findOne({ 'name.last': 'Ghost' });

    // 选择 `name` 和 `occupation` 字段
    query.select('name occupation');

    // 接下来执行查询
    query.exec(function (err, person) {
      if (err) return handleError(err);
      // 打印 "Space Ghost is a talk show host."
      console.log('%s %s is a %s.', person.name.first, person.name.last,
        person.occupation);
    });
    ```

    在上面的代码中，`query` 变量是[Query](./api.html#query-js)的类型。
    `Query`让你可以使用链式语法进行查询，而不是指定的JSON对象。
    下面两个例子是等价的。

    ```javascript
    // 通过一个JSON文档
    Person.
      find({
        occupation: /host/,
        'name.last': 'Ghost',
        age: { $gt: 17, $lt: 66 },
        likes: { $in: ['vaporizing', 'talking'] }
      }).
      limit(10).
      sort({ occupation: -1 }).
      select({ name: 1, occupation: 1 }).
      exec(callback);

    // Using query builder
    Person.
      find({ occupation: /host/ }).
      where('name.last').equals('Ghost').
      where('age').gt(17).lt(66).
      where('likes').in(['vaporizing', 'talking']).
      limit(10).
      sort('-occupation').
      select('name occupation').
      exec(callback);
    ```

    查询辅助函数的完整列表，可以参考[API文档](./api.html#query-js)。

    <h3 id="refs"><a href="#refs">引用其他文档(References to other documents)</a></h3>

    在MongoDB中没有任何联系，但有时我们仍希望在其他集合中存在引用。
    这就是为什么会有[填充(population)](./populate.html)。
    在[这里](./api.html#query_Query-populate)阅读更多关于如何在查询结果中从其他集合引入文档。

    <h3 id="streaming"><a href="#streaming">流(Streaming)</a></h3>

    你可以流处理MongoDB中的查询结果。你需要调用[Query#cursor()](./api.html#query_Query-cursor)函数，
    返回一个[QueryCursor](./api.html#querycursor-js)实例。

    ```javascript
    var cursor = Person.find({ occupation: /host/ }).cursor();
    cursor.on('data', function(doc) {
      // 每个文档调用一次
    });
    cursor.on('close', function() {
      // 操作完成后调用
    });
    ```
