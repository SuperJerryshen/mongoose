extends layout

block content
  :markdown
    ## 中间件(Middleware)

    中间件(也叫做预处理和后处理*钩子*)是传入控制异步函数执行的函数。
    中间件指定于schema层，对于编写[插件](./plugins.html)非常有用。
    Mongoose 4.x版本拥有4种中间件：
    document(文档)中间件、model(模型)中间件、aggregate(聚合)中间件和query(查询)中间件。
    document中间件在下面的文档函数中是支持的。
    在document中间件中，`this`指向此document。

    * [init](./api.html#document_Document-init)
    * [validate](./api.html#document_Document-validate)
    * [save](./api.html#model_Model-save)
    * [remove](./api.html#model_Model-remove)

    query中间件支持下面的 Model 和 Query 函数。
    `this`指向此query。

    * [count](./api.html#query_Query-count)
    * [find](./api.html#query_Query-find)
    * [findOne](./api.html#query_Query-findOne)
    * [findOneAndRemove](./api.html#query_Query-findOneAndRemove)
    * [findOneAndUpdate](./api.html#query_Query-findOneAndUpdate)
    * [update](./api.html#query_Query-update)

    Aggregate 中间件用于 `MyModel.aggregate()`。
    当你在aggregate对象上调用 `exec()` 时，Aggregate中间件将会执行。
    在Aggregate中间件中， `this` 指向 [aggregation object](./api.html#model_Model.aggregate)。

    * [聚合(aggregate)](./api.html#model_Model.aggregate)

    Model中间件支持下面的model函数，`this` 指向此model。

    * [insertMany](./api.html#model_Model.insertMany)

    所有的中间件类型支持预处理和后处理钩子。
    下面将会详细介绍预处理和后处理钩子。

    **注意：** `remove()` 对于query没有钩子，只有document有。
    如果你设置了一个'remove'钩子，它将会在你调用`myDoc.remove()`时触发，
    而不是在调用`MyModel.remove()`时。
    **注意：** `create()`函数会触发 `save()` 钩子。

    <h3 id="pre"><a href="#pre">预处理(Pre)</a></h3>

    有两种预处理钩子，分别是串行和并行。

    <h4 id="serial">串行(Serial)</h4>

    串行中间件函数在每一个中间件调用 `next` 后，会一个接着一个地执行。

    ```javascript
    var schema = new Schema(..);
    schema.pre('save', function(next) {
      // do stuff
      next();
    });
    ```

    调用 `next()` **不会** 终止中间件中其他代码的执行。
    在其他代码之前使用 [`return`](https://www.bennadel.com/blog/2323-use-a-return-statement-when-invoking-callbacks-especially-in-a-guard-statement.htm)
    可以在调用 `next()` 时，阻止其他代码在中间件中执行。

    ```javascript
    var schema = new Schema(..);
    schema.pre('save', function(next) {
      if (foo()) {
        console.log('calling next!');
        // `return next();` will make sure the rest of this function doesn't run
        /*return*/ next();
      }
      // Unless you comment out the `return` above, 'after next' will print
      console.log('after next');
    });
    ```

    <h4 id="parallel">并行(Parallel)</h4>

    并行中间件提供更细粒度的流控制。

    ```javascript
    var schema = new Schema(..);

    // `true` 以为着这是一个并行中间件。 
    // 如果想要使用并行中间件，你**必须**指定 `true` 为第二个参数。
    schema.pre('save', true, function(next, done) {
      // calling next kicks off the next middleware in parallel
      next();
      setTimeout(done, 100);
    });
    ```

    在 `save` 这种情况，钩子方法直到每一个中间件的 `done` 被调用后才会执行。

    <h4 id="use-cases">使用案例(Use Cases)</h4>

    中间件对于分离model逻辑非常有用。下面是一些其他建议：
    Middleware are useful for atomizing model logic. Here are some other ideas:

    * 复合验证
    * 删除依赖的document(删除用户的时候，删除他的所有博客)
    * 默认异步
    * 一个确定的任务触发一些异步任务

    <h4 id="error-handling">错误处理(Error handling)</h4>

    如果任意中间件使用 `Error` 类的参数作为来调用 `next` 或 `done`，执行流将会被打断，
    并且错误将会被传入回调函数中。

    ```javascript
    schema.pre('save', function(next) {
      var err = new Error('something went wrong');
      next(err);
    });

    // 然后...

    myDoc.save(function(err) {
      console.log(err.message) // 发生错误时
    });
    ```

    <h3 id="post"><a href="#post">Post中间件(Post middleware)</a></h3>

    [post](/docs/api.html#schema_Schema-post)中间件会在钩子方法_之后_执行，
    并且所有中间件的 `pre` 都已经执行完毕。

    ```javascript
    schema.post('init', function(doc) {
      console.log('%s has been initialized from the db', doc._id);
    });
    schema.post('validate', function(doc) {
      console.log('%s has been validated (but not saved yet)', doc._id);
    });
    schema.post('save', function(doc) {
      console.log('%s has been saved', doc._id);
    });
    schema.post('remove', function(doc) {
      console.log('%s has been removed', doc._id);
    });
    ```

    <h3 id="post-async"><a href="#post-async">异步post钩子(Asynchronous Post Hooks)</a></h3>

    如果你的post钩子函数接收至少两个参数，则mongoose将会假定第二个参数为一个 `next()` 函数，
    你可以按顺序通过调用它，从而触发接下来的中间件。

    ```javascript
    // 接收2个参数: 这是一个异步post钩子
    schema.post('save', function(doc, next) {
      setTimeout(function() {
        console.log('post1');
        // Kick off the second post hook
        next();
      }, 10);
    });

    // 直到第一个中间件调用 `next()` 后才会执行
    schema.post('save', function(doc, next) {
      console.log('post2');
      next();
    });
    ```

    <h3 id="order"><a href="#order">保存/验证钩子(Save/Validate Hooks)</a></h3>

    `save()` 函数会触发 `validate()` 钩子，
    因为mongoose有一个内建会调用 `validate()` 的 `pre('save')` 钩子。
    这意味着所有的 `pre('validate')` 和 `post('validate')` 钩子，
    会在所有的 `pre('save')` **之前**被调用。

    ```javascript
    schema.pre('validate', function() {
      console.log('this gets printed first');
    });
    schema.post('validate', function() {
      console.log('this gets printed second');
    });
    schema.pre('save', function() {
      console.log('this gets printed third');
    });
    schema.post('save', function() {
      console.log('this gets printed fourth');
    });
    ```

    <h3 id="notes"><a href="#notes">使用findAndUpdate()和Query中间件的注意事项(Notes on findAndUpdate() and Query Middleware)</a></h3>

    在 `update()`、`findOneAndUpdate()` 等方法上，
    `save()` 的预处理和后处理钩子将**不会**执行。
    你可以在这个[github issue](http://github.com/Automattic/mongoose/issues/964)中，
    查看更深入的讨论。Mongoose 4.0 对这些函数采用了清晰的钩子。

    ```javascript
    schema.pre('find', function() {
      console.log(this instanceof mongoose.Query); // true
      this.start = Date.now();
    });

    schema.post('find', function(result) {
      console.log(this instanceof mongoose.Query); // true
      // prints returned documents
      console.log('find() returned ' + JSON.stringify(result));
      // prints number of milliseconds the query took
      console.log('find() took ' + (Date.now() - this.start) + ' millis');
    });
    ```

    Query中间件相比于document中间件有一些微妙但很重要的不同点：
    在document中间件中，更新文档时，`this` 指向该文档。
    在Query中间件中，更新文档时，获取文档的引用不是必须的。
    所以 `this` 指向 **query** 对象而不是被更新的文档对象。

    对于实例，如果你想要在调用 `update()` 时添加一个
    `updatedAt` 时间戳，你需要使用下面的预处理钩子。

    ```javascript
    schema.pre('update', function() {
      this.update({},{ $set: { updatedAt: new Date() } });
    });
    ```

    <h3 id="error-handling"><a href="#error-handling">错误处理中间件(Error Handling Middleware)</a></h3>

    _v4.5.0 新增_

    正常情况下，如果中间件向 `next()` 传入一个错误 ，中间件的执行将会终止。
    然而，有一种叫做 "错误处理中间件" 的特殊后处理中间件，在发生错误时，仍然可以继续执行。

    错误处理中间件是一个可以接受一个额外参数的中间件：
    "错误" 对象作为函数的第一个参数。
    然后错误处理中间件可以将错误对象转换成你需要的形式。

    ```javascript
    var schema = new Schema({
      name: {
        type: String,
        // 当你保存一个重复的文档时，
        // 将会触发一个错误码为 11000 的 MongoError
        unique: true
      }
    });

    // 处理函数**必须**接收3个参数：
    // 发生的错误对象、发生问题的文档对象、`next()` 函数
    schema.post('save', function(error, doc, next) {
      if (error.name === 'MongoError' && error.code === 11000) {
        next(new Error('There was a duplicate key error'));
      } else {
        next(error);
      }
    });

    // 将会触发 `post('save')` 的错误处理
    Person.create([{ name: 'Axl Rose' }, { name: 'Axl Rose' }]);
    ```

    错误处理中间件在query中间件中也可以使用。
    你同样可以定义一个后处理 `update()` 钩子，
    从而可以捕获key重复时的错误。

    ```javascript
    // 当调用 `update()` 时，将触发同样的E11000错误
    // 此函数必**须接**收3个参数。This function **must** take 3 parameters. If you use the
    // 如果使用了 `passRawResult` 函数，
    // 函数就必须传入4个参数
    schema.post('update', function(error, res, next) {
      if (error.name === 'MongoError' && error.code === 11000) {
        next(new Error('There was a duplicate key error'));
      } else {
        next(error);
      }
    });

    var people = [{ name: 'Axl Rose' }, { name: 'Slash' }];
    Person.create(people, function(error) {
      Person.update({ name: 'Slash' }, { $set: { name: 'Axl Rose' } }, function(error) {
        // `error.message` will be "There was a duplicate key error"
      });
    });
    ```

    <h3 id="next">接下来</h3>

    我们已经介绍完中间件了，接下来让我们看一下
    Mongoose通过它的query[填充](/docs/populate.html)辅助函数修改连接的方法。
