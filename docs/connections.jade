extends layout

block content
  :markdown
    <h2><a href="#connections">连接（Connections）</a></h2>

    你可以通过`mongoose.connect()`连接MongoDB。

    ```javascript
    mongoose.connect('mongodb://localhost/myapp');
    ```
    至少你要连接到运行在默认端口（27017）的本地 `myapp` 数据库。
    如果本地连接失败了，可以尝试把 `localhost` 替换为 `127.0.0.1`。
    如果本地主机名称改变了，就可能会造成问题。

    你可以在 `uri` 上加入一些更精确的参数：

    ```javascript
    mongoose.connect('mongodb://username:password@host:port/database?options...');
    ```

    想要了解更多内容，请查看[mongodb的uri连接配置](http://docs.mongodb.org/manual/reference/connection-string/)。

    <h3 id="buffering"><a href="#buffering">操作缓存（Operation Buffering）</a></h3>

    不用等待mongoose和MongoDB建立连接，
    Mongoose 就可以让你迅速地开始使用你的models。

    ```javascript
    mongoose.connect('mongodb://localhost/myapp');
    var MyModel = mongoose.model('Test', new Schema({ name: String }));
    // 有效
    MyModel.findOne(function(error, result) { /* ... */ });
    ```

    这是因为mongoose内部会缓存model函数的回调。
    缓存使用非常方便，但也会造成不少困惑。
    如果在没有连接数据库的时候使用model，
    Mongoose默认将 *不会* 抛出任何错误。

    ```javascript
    var MyModel = mongoose.model('Test', new Schema({ name: String }));
    // 将会挂载，直到mongoose连接成功
    MyModel.findOne(function(error, result) { /* ... */ });

    setTimeout(function() {
      mongoose.connect('mongodb://localhost/myapp');
    }, 60000);
    ```

    为了禁用缓存，关闭schema上的[`bufferCommands`选项](./guide.html#bufferCommands)。
    如果在连接中已经有`bufferCommands`，或者你没有正确地打开一个连接，可以尝试关闭`bufferCommands`。
    你也可以全局禁用`bufferCommands`：

    ```javascript
    mongoose.set('bufferCommands', false);
    ```

    <h3 id="options"><a href="#options">配置(Options)</a></h3>

    `connect`方法接受一个传递到底层MongoDB驱动程序的`options`对象。

    ```javascript
    mongoose.connect(uri, options);
    ```

    可以查看[MongoDB Node.js的`connect()`驱动文档](http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html#connect)，来获取所有配置选项的列表。
    Mongoose传递给驱动程序的过程中不会做任何修改，下面将解释三个例外。

    * `bufferCommands`    - 这是一个mongoose特定的参数(不会传递给MongoDB驱动程序)，这个选项用于禁用[mongoose缓存机制](http://mongoosejs.com/docs/faq.html#callback_never_executes)
    * `user`/`pass`       - 用于验证的username和password。这些选项是mongoose特定的参数, 他们等同于MongoDB驱动器的 `auth.user` 和 `auth.password` 选项。
    * `autoIndex`         - 默认情况，mongoose连接时，会在你的schema中自动构建索引， 这对于开发非常赞，但是因为构建索引会导致性能下降，所以对于大型产品的部署不是很理想，如果将 `autoIndex` 设置为false，对于**任何**关于这个连接的模型，mongoose将不会自动创建索引。

    下面是一些对于mongoose调整非常重要的配置。

    * `autoReconnect`     - The underlying MongoDB driver will automatically try to reconnect when it loses connection to MongoDB. Unless you are an extremely advanced user that wants to manage their own connection pool, do **not** set this option to `false`.
    * `reconnectTries`    - If you're connected to a single server or mongos proxy (as opposed to a replica set), the MongoDB driver will try to reconnect every `reconnectInterval` milliseconds for `reconnectTries` times, and give up afterward. When the driver gives up, the mongoose connection emits a `reconnectFailed` event. This option does nothing for replica set connections.
    * `reconnectInterval` - See `reconnectTries`
    * `promiseLibrary`    - sets the [underlying driver's promise library](http://mongodb.github.io/node-mongodb-native/2.1/api/MongoClient.html)
    * `poolSize`          - The maximum number of sockets the MongoDB driver will keep open for this connection. By default, `poolSize` is 5. Keep in mind that, as of MongoDB 3.4, MongoDB only allows one operation per socket at a time, so you may want to increase this if you find you have a few slow queries that are blocking faster queries from proceeding.
    * `bufferMaxEntries`  - The MongoDB driver also has its own buffering mechanism that kicks in when the driver is disconnected. Set this option to 0 and set `bufferCommands` to `false` on your schemas if you want your database operations to fail immediately when the driver is not connected, as opposed to waiting for reconnection.

    Example:

    ```javascript
    const options = {
      useMongoClient: true,
      autoIndex: false, // 不会创建索引
      reconnectTries: Number.MAX_VALUE, // 从不终止重新连接
      reconnectInterval: 500, // 每500ms重连一次
      poolSize: 10, // 维持到10个socket连接
      // 如果没有连接，将立刻返回错误，而不是等待重连
      bufferMaxEntries: 0
    };
    mongoose.connect(uri, options);
    ```

    <h3 id="callback"><a href="#callback">回调(Callback)</a></h3>

    `connect()`函数同样接收一个回调函数作为参数，并返回一个[promise](./promises.html)。

    ```javascript
    mongoose.connect(uri, options, function(error) {
      // 初次连接检查错误，回调函数无第二个参数
    });

    // 或者使用promise
    mongoose.connect(uri, options).then(
      () => { /** ready to use. The `mongoose.connect()` promise resolves to undefined. */ },
      err => { /** handle initial connection error */ }
    );
    ```

    <h3 id="connection-string-options"><a href="#connection-string-options">连接的字符串选项(Connection String Options)</a></h3>

    你也可以通过连接的字符串，来配置驱动的参数，
    就像URI中部分[query字符串的参数](https://en.wikipedia.org/wiki/Query_string)一样。
    这仅仅适用于传递给MongoDB驱动器的参数。
    你**不能**在query字符串中，设置像`bufferCommands`这样的Mongoose特定参数。

    ```javascript
    mongoose.connect('mongodb://localhost:27017/test?connectTimeoutMS=1000&bufferCommands=false');
    // 等同于：
    mongoose.connect('mongodb://localhost:27017/test', {
      connectTimeoutMS: 1000
      // Note that mongoose will **not** pull `bufferCommands` from the query string
    });
    ```

    The disadvantage of putting options in the query string is that query
    string options are harder to read. The advantage is that you only need a
    single configuration option, the URI, rather than separate options for
    `socketTimeoutMS`, `connectTimeoutMS`, etc. Best practice is to put options
    that likely differ between development and production, like `replicaSet`
    or `ssl`, in the connection string, and options that should remain constant,
    like `connectTimeoutMS` or `poolSize`, in the options object.

    The MongoDB docs have a full list of
    [supported connection string options](https://docs.mongodb.com/manual/reference/connection-string/)

    <h3 id="keepAlive"><a href="#keepAlive">A note about keepAlive</a></h3>

    For long running applications, it is often prudent to enable `keepAlive`
    with a number of milliseconds. Without it, after some period of time
    you may start to see `"connection closed"` errors for what seems like
    no reason. If so, after
    [reading this](http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html),
    you may decide to enable `keepAlive`:

    ```javascript
    mongoose.connect(uri, { keepAlive: 120 });
    ```

    <h3 id="replicaset_connections"><a href="#replicaset_connections">Replica Set Connections</a></h3>

    To connect to a replica set you pass a comma delimited list of hosts to
    connect to rather than a single host.

    ```javascript
    mongoose.connect('mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]' [, options]);
    ```

    To connect to a single node replica set, specify the `replicaSet` option.

    ```javascript
    mongoose.connect('mongodb://host1:port1/?replicaSet=rsName');
    ```

    <h3 id="mongos_connections"><a href="#mongos_connections">Multi-mongos support</a></h3>

    You can also connect to multiple [mongos](https://docs.mongodb.com/manual/reference/program/mongos/) instances
    for high availability in a sharded cluster. You do
    [not need to pass any special options to connect to multiple mongos](http://mongodb.github.io/node-mongodb-native/3.0/tutorials/connect/#connect-to-sharded-cluster) in mongoose 5.x.

    ```javascript
    // Connect to 2 mongos servers
    mongoose.connect('mongodb://mongosA:27501,mongosB:27501', cb);
    ```

    <h3 id="multiple_connections"><a href="#multiple_connections">Multiple connections</a></h3>

    So far we've seen how to connect to MongoDB using Mongoose's default
    connection. At times we may need multiple connections open to Mongo, each
    with different read/write settings, or maybe just to different databases for
    example. In these cases we can utilize `mongoose.createConnection()` which
    accepts all the arguments already discussed and returns a fresh connection
    for you.

    ```javascript
    const conn = mongoose.createConnection('mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]', options);
    ```

    This [connection](./api.html#connection_Connection) object is then used to
    create and retrieve [models](./api.html#model_Model). Models are
    **always** scoped to a single connection.

    Mongoose creates a _default connection_ when you call `mongoose.connect()`.
    You can access the default connection using `mongoose.connection`.

    <h3 id="connection_pools"><a href="connection_pools">Connection pools</a></h3>

    Each `connection`, whether created with `mongoose.connect` or
    `mongoose.createConnection` are all backed by an internal configurable
    connection pool defaulting to a maximum size of 5. Adjust the pool size
    using your connection options:

    ```javascript
    // With object options
    mongoose.createConnection(uri, { poolSize: 4 });

    const uri = 'mongodb://localhost/test?poolSize=4';
    mongoose.createConnection(uri);
    ```

    <h3 id="v5-changes"><a href="#v5-changes">Option Changes in v5.x</a></h3>

    You may see the following deprecation warning if upgrading from 4.x to 5.x
    and you didn't use the `useMongoClient` option in 4.x:

    ```
    the server/replset/mongos options are deprecated, all their options are supported at the top level of the options object
    ```

    In older version of the MongoDB driver you had to specify distinct options
    for server connections, replica set connections, and mongos connections:

    ```javascript
    mongoose.connect(myUri, {
      server: {
        socketOptions: {
          socketTimeoutMS: 0,
          keepAlive: true
        },
        reconnectTries: 30
      },
      replset: {
        socketOptions: {
          socketTimeoutMS: 0,
          keepAlive: true
        },
        reconnectTries: 30
      },
      mongos: {
        socketOptions: {
          socketTimeoutMS: 0,
          keepAlive: true
        },
        reconnectTries: 30
      }
    });
    ```

    In mongoose v5.x you can instead declare these options at the top level,
    without all that extra nesting.
    [Here's the list of all supported options](http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html).

    ```javascript
    // Equivalent to the above code
    mongoose.connect(myUri, {
      socketTimeoutMS: 0,
      keepAlive: true,
      reconnectTries: 30
    });
    ```

    <h3 id="next">Next Up</h3>

    Now that we've covered connections, let's take a look at [models](/docs/models.html).
