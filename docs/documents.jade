extends layout

block content
  :markdown
    ## 文档 (Documents)

    Mongoose [文档(documents)](./api.html#document-js)和存储在MongoDB中的文档是一一对应的关系。
    每一个文档都是它的[模型(Model)](./models.html)实例。

    ### 检索(Retrieving)

    从MongoDB中检索文档，拥有许多种方式。
    在这一节不会讲这些内容，如果需要了解更多请查看[querying](./queries.html)。

    ### 更新(Updating)

    更新文档有很多方式。首先我们先看一个使用
    [findById](./api.html#model_Model.findById)，比较传统的方式：

    ```javascript
    Tank.findById(id, function (err, tank) {
      if (err) return handleError(err);

      tank.size = 'large';
      tank.save(function (err, updatedTank) {
        if (err) return handleError(err);
        res.send(updatedTank);
      });
    });
    ```

    你还可以使用[`.set()`](./api.html#document_Document-set)修改文档。
    而在底层，`tank.size = 'large';`会变成`tank.set({ size: 'large' })`。

    ```javascript
    Tank.findById(id, function (err, tank) {
      if (err) return handleError(err);

      tank.set({ size: 'large' });
      tank.save(function (err, updatedTank) {
        if (err) return handleError(err);
        res.send(updatedTank);
      });
    });
    ```

    这种方式首先会从Mongo中检索文档，然后发出一个更新指令(由`save`触发)。
    但是如果我们不需要从应用中返回文档，仅仅只是想要在数据库中直接更新一个属性，
    此时我们应该使用[Model#update](./api.html#model_Model.update)：

    ```javascript
    Tank.update({ _id: id }, { $set: { size: 'large' }}, callback);
    ```

    如果我们需要返回文档，最好使用[findByIdAndUpdate](./api.html#model_Model.findByIdAndUpdate)：

    ```javascript
    Tank.findByIdAndUpdate(id, { $set: { size: 'large' }}, { new: true }, function (err, tank) {
      if (err) return handleError(err);
      res.send(tank);
    });
    ```

    所有的`findAndUpdate/Remove`静态方法最多只会对一个文档造成改变，只连接一次数据库，并会返回它。
    在[findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command)中，
    [有](./api.html#model_Model.findByIdAndRemove)[一些](./api.html#model_Model.findOneAndUpdate)[变化](./api.html#model_Model.findOneAndRemove)。
    阅读[API](./api.html)获取更多内容。

    _注意：在未改变数据库之前，*千万不要*使用`findAndUpdate/Remove`执行任何验证和钩子。
    你可以使用[`runValidators` 选项](/docs/validation.html#update-validators)来通过一个限制的文档子集验证。
    然而，如果你需要钩子和整个文档的验证，请先查询文档，在使用`save()`保存它。_

    ### 验证(Validating)

    文档在保存之前会自动验证。阅读[api](./api.html#document_Document-validate)文档
    或[validation](./validation.html)章节获取更多内容。

    ### 覆盖(Overwriting)

    你可以使用`.set()`覆盖整个文档。如果你准备在
    [中间件](./middleware.html)里改变已经保存了的文档，将会非常方便。

    ```javascript
    Tank.findById(id, function (err, tank) {
      if (err) return handleError(err);
      // Now `otherTank` is a copy of `tank`
      otherTank.set(tank);
    });
    ```

    ### 接下来

    我们已经了解了文档，接下来让我们看一下[Sub-documents](/docs/subdocs.html)。
